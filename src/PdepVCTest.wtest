import Carpeta.*
import Archivo.*
import Commit.*
import Cambio.*
import Branch.*
import Usuario.*

describe "PdePVC" {

	var foodir
	var bartxt
	var baztxt
	var pdep
	var commit
	var otroCommit
	var nuevoCommit
	var master

	fixture {
		bartxt = new Archivo(nombre = "bar.txt", contenido = "Buen día!")
		baztxt = new Archivo(nombre = "baz.txt", contenido = "Buenas noches!")
		foodir = new Carpeta(nombre = "Foo", archivos = [ bartxt, baztxt ])
		pdep = new Carpeta(nombre = "pdep", archivos = [])
		
		commit = new Commit(descripcion = "Hago muchos cambios", carpeta = pdep)
		
		commit.agregarCambio(new Crear(nombreArchivo = "leame.md"))
		commit.agregarCambio(new Crear(nombreArchivo = "parcial.wlk"))
		commit.agregarCambio(new Eliminar(nombreArchivo = "parcial.wlk"))
		commit.agregarCambio(new Agregar(nombreArchivo = "leame.md", contenido = "parciallala"))
		commit.agregarCambio(new Sacar(nombreArchivo = "leame.md", contenido = "lala"))
		
		otroCommit = new Commit(descripcion = "Agrego parcial.wlk", carpeta = pdep)
		otroCommit.agregarCambio(new Crear(nombreArchivo = "parcial.wlk"))
		otroCommit.agregarCambio(new Agregar(nombreArchivo = "parcial.wlk", contenido = "object pepita {}"))
		
		nuevoCommit = new Commit(descripcion = "Agrego archivo hola.txt", carpeta = pdep)
		nuevoCommit.agregarCambio(new Crear(nombreArchivo = "hola.txt"))
		
		master = new Branch()
		master.agregarCommit(commit)
		master.agregarCommit(otroCommit)
		
	}

	test "Punto 1 - Una carpeta tiene un archivo específico" {
		assert.that(foodir.tiene("bar.txt"))
	}

	test "Punto 1 - Una carpeta no tiene un archivo específico" {
		assert.notThat(foodir.tiene("sas.txt"))
	}

	test "Punto 2 - Un commit con todos los cambios puede hacerse" {
		commit.aplicar()
		assert.equals("parcial", pdep.archivoLlamado("leame.md").contenido())
	}

	test "Punto 2 - Debería interrumpirse la aplicacion de cambios si no puede crearse un archivo que ya existe" {
		commit.agregarCambio(new Crear(nombreArchivo = "leame.md"))
		assert.throwsExceptionWithMessage("Carpeta 'pdep': No se puede realizar el cambio en el archivo 'leame.md'", { commit.aplicar()})
	}

	test "Punto 2 - Debería interrumpirse la aplicacion de cambios si no puede eliminarse un archivo que no existe" {
		commit.agregarCambio(new Eliminar(nombreArchivo = "parcial.wlk"))
		assert.throwsExceptionWithMessage("Carpeta 'pdep': No se puede realizar el cambio en el archivo 'parcial.wlk'", { commit.aplicar()})
	}

	test "Punto 2 - Debería interrumpirse la aplicacion de cambios si no puede agregarse contenido a un archivo que no existe" {
		commit.agregarCambio(new Agregar(nombreArchivo = "parcial.wlk", contenido = "hola"))
		assert.throwsExceptionWithMessage("Carpeta 'pdep': No se puede realizar el cambio en el archivo 'parcial.wlk'", { commit.aplicar()})
	}

	test "Punto 2 - Debería interrumpirse la aplicacion de cambios si no puede sacarse contenido a un archivo que no existe" {
		commit.agregarCambio(new Sacar(nombreArchivo = "parcial.wlk", contenido = "hola"))
		assert.throwsExceptionWithMessage("Carpeta 'pdep': No se puede realizar el cambio en el archivo 'parcial.wlk'", { commit.aplicar()})
	}

	test "Punto 3 - Checkoutear una branch" {
		master.checkout()
		assert.equals(2, pdep.archivos().size())
	}

	test "Punto 4 - log sobre un archivo que cambió en todos los commits de una branch" {
		assert.equals([ commit, otroCommit ], master.log("parcial.wlk"))
	}

	test "Punto 4 - log sobre un archivo que cambió en un commit de una branch" {
		master.agregarCommit(nuevoCommit)
		assert.equals([ nuevoCommit ], master.log("hola.txt"))
	}

	test "Punto 4 - log sobre un archivo que no está en ningún commit de una branch" {
		assert.equals([], master.log("chau.txt"))
	}

	test "Punto 5 - revert de un commit crea un commit con su descripción revertida" {
		const commitRevertido = otroCommit.revert()
		assert.equals("revert Agrego parcial.wlk", commitRevertido.descripcion())
	}

	test "Punto 5 - revert de un commit crea un commit con la misma cantidad de cambios" {
		const commitRevertido = otroCommit.revert()
		assert.equals(2, commitRevertido.cambios().size())
	}

}
